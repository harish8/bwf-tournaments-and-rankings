# AUTOGENERATED! DO NOT EDIT! File to edit: tournaments_eda.ipynb.

# %% auto 0
__all__ = []

# %% tournaments_eda.ipynb 3
# import the neccessary packages
import streamlit as st

from streamlit_jupyter import StreamlitPatcher, tqdm

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import io


# %% tournaments_eda.ipynb 5
st.title("BWF Tournaments")

# %% tournaments_eda.ipynb 6
st.markdown(f" ## Fetch the data from csv file and store it in a variable.")

# %% tournaments_eda.ipynb 7
tournaments_df = pd.read_csv('./data/tournaments.csv', index_col=0)

pd.set_option('display.max_colwidth', None)

# %% tournaments_eda.ipynb 8
# To display the output in your Streamlit app, pipe the output of df.info to a buffer instead of sys.stdout, 
# get the buffer content, and display it with st.text like so:
buffer = io.StringIO()
tournaments_df.info(buf=buffer)
df_tournaments_info = buffer.getvalue()

st.text(df_tournaments_info)

# %% tournaments_eda.ipynb 9
st.write(tournaments_df.describe())

# %% tournaments_eda.ipynb 10
st.markdown(
"""
As we see the total count for each column other than type is 330. And the total count in Type is only 254. so need to figure out what types are missing and how to fill those or remove those if necessary. 

Aditionally from the original dataset there's no index column. let's start with adding index column to the dataframe. 
"""
)

# %% tournaments_eda.ipynb 11
# add a new integer index column to the dataframe
tournaments_df.reset_index(inplace=True)
tournaments_df = tournaments_df.rename_axis('Index')

# %% tournaments_eda.ipynb 12
st.markdown(f" ### Let's see our dataframe now with a proper index and first 10 results to get a sense of how it's looking")

st.dataframe(tournaments_df.head(10))

# %% tournaments_eda.ipynb 13
st.markdown(
"""
Now we have added the proper integier index column let's focus on missing values in `type`.  
"""
)

# %% tournaments_eda.ipynb 14
# find if there's any missing values. 
tournaments_df_nan_values = tournaments_df[tournaments_df.isna().any(axis=1)]

st.markdown(f" ### This following output is the list of values with NaN in the dataframe")
st.dataframe(tournaments_df_nan_values.head())

# %% tournaments_eda.ipynb 15
st.markdown(f'''
after carefully observing the tournament events on BWF tournament software website and learning the event types and tournament structure grading, 
    the missing types are mostly `Grade 3 and Junior` tournaments. 
    https://corporate.bwfbadminton.com/events/    
'''
)


# %% tournaments_eda.ipynb 16
# fill missing values with `Grade 3 and Junior`

tournaments_df['type'].fillna('Grade 3 and Junior', inplace=True)

# %% tournaments_eda.ipynb 17
st.markdown(f" ### Now we filled the missing values in `type` with `Grade 3 and Junior`, next let's convert the `start_date` and `end_date` to `datetime64[ns]` Dtype instead of object ")

tournaments_df['start_date'] = pd.to_datetime(tournaments_df['start_date'], format='%m/%d/%Y')
tournaments_df['end_date'] = pd.to_datetime(tournaments_df['end_date'], format='%m/%d/%Y')

# create a new column called `duration` with the tournaments start date and end date. 
tournaments_df['duration'] = (tournaments_df['end_date'] - tournaments_df['start_date']).dt.days

tournaments_df.head()

# %% tournaments_eda.ipynb 18
st.markdown('''
There, now we have all the dataset with `no null` values and the right Dtypes necessary to move further. 
''')

# %% tournaments_eda.ipynb 19
st.markdown(f" lets recheck our dateframe info after the fixes we did to make sure its looking good to proceed")
buffer = io.StringIO()
tournaments_df.info(buf=buffer)
df_tournaments_info = buffer.getvalue()

st.text(df_tournaments_info)

# %% tournaments_eda.ipynb 20
st.markdown(f" ## Processing the variable Countries")

# %% tournaments_eda.ipynb 21
st.markdown(f" first lets fetch all the unique countries who hosted tournaments")

st.write(pd.Series(tournaments_df['country'].unique(), name = "Countries").to_frame())

# %% tournaments_eda.ipynb 22
st.markdown(f" Creating a bar chart illustrating the frequency of each country hosting a tournament in its home country.")

# Get the unique counts of each country and store the dataframe in a new variable `all_countries`
# The resulted all_countries will have two new columns called `country` and `count`
all_countries = tournaments_df['country'].value_counts().reset_index()

#TODO set these following custom color palette to the bars
#colors = ['#40e0d0', '#20b2aa', '#fdaa48','#6890F0','#A890F0']

# Create a bar plot with Seaborn
fig, ax = plt.subplots(figsize =(18,7))
sns.barplot(x=all_countries['country'], y=all_countries['count'], palette='Paired')

# set title, xlabel and ylable
ax.set_title("Counting the Hosts: Badminton Tournaments by Country", fontsize=15,weight='bold')
plt.xlabel('Countries')
plt.ylabel('Count')

# Rotate x-axis labels vertically
plt.xticks(rotation=90, ha='center')

# Display count on top of each bar
for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', xytext=(0, 10), textcoords='offset points')

sns.despine(right=True, top=True)

st.pyplot(fig)
plt.show()

# %% tournaments_eda.ipynb 23
st.markdown('''
As we see `Malaysia` and `China` hosted 14 tournaments making them the leaders in terms of hosting.. 
Following closely are Indonesia and France, each having hosted 11 tournaments each.

we'll check the dates and frequency of these tournaments organized as we go further. 
''')

# %% tournaments_eda.ipynb 24
# tournaments_df['duration'] = (tournaments_df['end_date'] -  tournaments_df['start_date'])

scheduled_tournaments_by_country = tournaments_df.groupby(['country', 'city', 'type']).agg({
    'start_date' : lambda x : list(x),
    'end_date' : lambda x : list(x),
    'duration' : lambda x : list(x)
}).reset_index()

scheduled_tournaments_by_country = scheduled_tournaments_by_country.rename_axis('Index')
st.dataframe(scheduled_tournaments_by_country.head(10))

# %% tournaments_eda.ipynb 25
st.markdown('''
Let's check the frequency of each type of tournament happend from 2022 to early 2024 
''')

# %% tournaments_eda.ipynb 26
type_counts = scheduled_tournaments_by_country['type'].value_counts()

# using Seaborn to create a column chart
sns.set(style="whitegrid")
fig, ax = plt.subplots(figsize = (16, 8))
sns.barplot(x= type_counts.index, y = type_counts, palette="viridis")


# Adding count annotations on top of each bar
for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=10)

tournament_dates = {}
tournament_dates['first_start_day'] = tournaments_df['start_date'].min().date()
tournament_dates['last_end_date'] = tournaments_df['end_date'].max().date()

# Adding labels and title
plt.xlabel('Tournament Type')
plt.ylabel('Count')
plt.title(f'Number of Tournaments by Type: {tournament_dates["first_start_day"]} to {tournament_dates["last_end_date"]}')

# Rotating x-axis labels for better readability
plt.xticks(rotation=45, ha='right')
sns.despine(right=True, top=True)

# Display the plot
st.pyplot(fig)
plt.show()
